# Автор: Панков Василий
# Дата создания: 27.05.2023

import unittest

from logic.alg_crascal import check_matrix, crascal_solve, generate_matrix_to_solve, parse_matrix_from_string


class TestAlgCrascal(unittest.TestCase):
    """Тестирование алогритма Краскала"""
    invalid_matrices = [
        # Матрица неквадратная первый случай
        [
            [1, 0, 3],
            [0, 1],
            [2, 3, 0]],

        # Матрица не квадратная второй случай
        [[1, 2, 3]],

        # Нет симметрии
        [
            [0, 0, 3],
            [0, 0, 1],
            [2, 3, 0],
        ],

        # Отрицательные числа
        [[0, -2],
         [-2, 0]],

        # Диагональ не равна 0
        [[1, 1, 1, 1, 1],
         [1, 2, 2, 2, 2],
         [1, 2, 3, 3, 3],
         [1, 2, 3, 4, 4],
         [1, 2, 3, 4, 5]
         ]
    ]
    def test_check_matrix_valid(self):
        """Тестирование проверки матриц для решения алгоритмом Краскала, корректные матрицы"""
        matrices = [[],
                    [
                        [0, 7, 11, 6, 5, 8],
                        [7, 0, 1, 8, 19, 7],
                        [11, 1, 0, 9, 0, 4],
                        [6, 8, 9, 0, 12, 16],
                        [5, 19, 0, 12, 0, 17],
                        [8, 7, 4, 16, 17, 0]
                    ],
                    # Диагональ равна 0
                    [[0]],

                    [[0, 1, 1, 1, 1],
                     [1, 0, 2, 2, 2],
                     [1, 2, 0, 3, 3],
                     [1, 2, 3, 0, 4],
                     [1, 2, 3, 4, 0]
                     ],
                    # Проверки функции генератора и парсера
                    parse_matrix_from_string(generate_matrix_to_solve())
                    ]
        for el in matrices:
            self.assertIsNone(check_matrix(el))

    def test_check_matrix_invalid(self):
        """Тестирование проверки матриц для решения алгоритмом Краскала, некорректные матрицы"""

        for matrix in self.invalid_matrices:
            self.assertRaises(AssertionError, check_matrix, matrix)

    def test_crascal_solve(self):
        """Тестирование решения алгоритмом Краскала"""
        matrices = [
            # Тестовая матрица 1 (нет возможной разъеденении двух множеств)
            [[0, 1, 2, 0],
             [1, 0, 3, 0],
             [2, 3, 0, 4],
             [0, 0, 4, 0]],
            # Тестовая матрица 2 (большая матрица, есть возможное разъеденение двух множеств)
            [
                [0,  7,  11, 6,  5,  8],
                [7,  0,  1,  8,  19, 7],
                [11, 1,  0,  9,  0,  4],
                [6,  8,  9,  0,  12, 16],
                [5,  19, 0,  12, 0,  17],
                [8,  7,  4,  16, 17, 0]
            ],

            # Тестовая матрица 3 (дополнительный тест)
            [[0, 1, 3, 0],
             [1, 0, 0, 2],
             [3, 0, 0, 4],
             [0, 2, 4, 0]],

            # Пустая матрица
            [],

            # Матрица с одной вершиной
            [[0]],

            # Матрица с дублирующимися ребрами
            [[0, 1, 2],
             [1, 0, 1],
             [2, 1, 0]]
        ]

        # Список ожидаемых результатов
        expected_results = [
            # Ожидаемый результат для Тестовой матрицы 1
            [(0, 1, 1), (0, 2, 2), (2, 3, 4)],

            # Ожидаемый результат для Тестовой матрицы 2
            [(1, 2, 1), (2, 5, 4), (0, 4, 5), (0, 3, 6), (0, 1, 7)],

            # Ожидаемый результат для Тестовой матрицы 3
            [(0, 1, 1), (1, 3, 2), (0, 2, 3)],

            # Ожидаемый результат для Пустой матрицы
            [],

            # Ожидаемый результат для Матрицы с одной вершиной
            [],

            # Ожидаемый результат для Матрицы с дублирующимися ребрами
            [(0, 1, 1), (1, 2, 1)]
        ]

        # Проверка результатов для каждой матрицы
        for matrix, expected_result in zip(matrices, expected_results):
            self.assertEqual(crascal_solve(matrix), expected_result)

    def test_crascal_solve_invalid_matrix(self):
        """Тест с неправильными матрицами"""
        for matrix in self.invalid_matrices:
            self.assertRaises(AssertionError, crascal_solve, matrix)


if __name__ == '__main__':
    unittest.main()
